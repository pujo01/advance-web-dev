'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _formStoreShape = require('./formStoreShape');

var _formStoreShape2 = _interopRequireDefault(_formStoreShape);

var _actions = require('./actions');

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isValidPath(path) {
  (0, _invariant2.default)(typeof path === 'string' || Array.isArray(path), 'Path must be string or an array of strings, ' + 'you can use the format \'a.b.c\' for nested values');

  (0, _invariant2.default)(!/^errors/.test(path), 'Path cannot start with \'errors\'');

  return true;
}

var Field = function (_PureComponent) {
  _inherits(Field, _PureComponent);

  function Field() {
    _classCallCheck(this, Field);

    return _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).apply(this, arguments));
  }

  _createClass(Field, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props,
          path = _props.path,
          validate = _props.validate,
          value = _props.value;


      if (isValidPath(path)) {
        this.setValue = this.makeValueHandler(path);
        this.subscribeToPath(path);
        this.addValidators(path, validate);

        if (value) this.setValue(value);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props2 = this.props,
          path = _props2.path,
          validate = _props2.validate,
          value = _props2.value;


      if (path !== nextProps.path && isValidPath(nextProps.path)) {
        this.setValue = this.makeValueHandler(nextProps.path);

        if (this.unsubscribe) this.unsubscribe();
        this.subscribeToPath(path);

        if (this.removeValidators) this.removeValidators();
        this.addValidators(path, validate);
      }

      if (value !== nextProps.value) {
        this.setValue(nextProps.value);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.unsubscribe) this.unsubscribe();
    }
  }, {
    key: 'makeValueHandler',
    value: function makeValueHandler(path) {
      var _this2 = this;

      return function (value) {
        var form = _this2.context.form;

        form.dispatch(actions.setValue(path, value));
      };
    }
  }, {
    key: 'subscribeToPath',
    value: function subscribeToPath(path) {
      var _this3 = this;

      var form = this.context.form;

      var state = form.getFormState();

      this.updateStateAtPath(form.getFormState(), path);

      this.setState({
        value: _objectPath2.default.get(state, path),
        error: _objectPath2.default.get(state, ['errors', path])
      });

      this.unsubscribe = form.subscribe(function () {
        _this3.updateStateAtPath(form.getFormState(), path);
      });
    }
  }, {
    key: 'updateStateAtPath',
    value: function updateStateAtPath(state, path) {
      this.setState({
        value: _objectPath2.default.get(state, path),
        error: _objectPath2.default.get(state, ['errors', path])
      });
    }
  }, {
    key: 'addValidators',
    value: function addValidators(path) {
      var validators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var form = this.context.form;

      var removeFns = [].concat(validators).map(function (v) {
        return form.addValidator(path, v);
      });

      this.removeValidators = function () {
        return removeFns.forEach(function (fn) {
          return fn();
        });
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;
      var _state = this.state,
          value = _state.value,
          error = _state.error;


      return children({ value: value, error: error, setValue: this.setValue });
    }
  }]);

  return Field;
}(_react.PureComponent);

exports.default = Field;


Field.propTypes = {
  path: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.array]).isRequired,
  validate: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.arrayOf(_react.PropTypes.func)]),
  value: _react.PropTypes.any, // eslint-disable-line react/forbid-prop-types
  children: _react.PropTypes.func.isRequired
};

Field.contextTypes = {
  form: _formStoreShape2.default.isRequired
};