'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = formEnhancer;

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _constants = require('./constants');

var _actions = require('./actions');

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function formEnhancer(formReducerName) {
  var validators = [];
  var submitListeners = [];

  function removeValidator(path, validator) {
    validators = validators.filter(function (v) {
      return v.path !== path && v.validator !== validator;
    });
  }

  function removeSubmitListener(listener) {
    submitListeners = submitListeners.filter(function (sl) {
      return sl.listener !== listener;
    });
  }

  function addValidator(path, validator) {
    validators.push({ path: path, validator: validator });
    return function () {
      return removeValidator(path, validator);
    };
  }

  function addSubmitListener(listener, submitOnValue) {
    submitListeners.push({ listener: listener, submitOnValue: submitOnValue });
    return function () {
      return removeSubmitListener(listener);
    };
  }

  return function (next) {
    return function () {
      var store = next.apply(undefined, arguments);

      function getFormState() {
        var state = store.getState() || {};

        if (formReducerName) state = state[formReducerName];

        return state;
      }

      var initialState = getFormState();
      var triggerOnValueListeners = false;

      function dispatch(action) {
        if (action.type === _constants.VALUE) {
          triggerOnValueListeners = true;
        }

        store.dispatch(action);
      }

      function runValidator(_ref) {
        var path = _ref.path,
            validator = _ref.validator;

        var value = _objectPath2.default.get(getFormState(), path);

        return validator(value, path, getFormState()).then(function () {
          dispatch(actions.clearValidationError(path));
          return true;
        }).catch(function (err) {
          dispatch(actions.setValidationError(path, err));
          return false;
        });
      }

      function validate() {
        return Promise.all(validators.map(runValidator)).then(function (results) {
          return results.every(function (isValid) {
            return isValid;
          });
        });
      }

      function submitWithListeners(listeners) {
        if (listeners.length === 0) return Promise.resolve();

        return validate().then(function (isValid) {
          if (!isValid) return;
          var state = getFormState();
          listeners.forEach(function (listener) {
            return listener(state);
          });
        });
      }

      // triggers submitOnValue listeners on state change, allows for async
      // store updates like batched subscribe
      var unsubscribe = store.subscribe(function () {
        if (triggerOnValueListeners) {
          triggerOnValueListeners = false;

          var onValueSubmitListeners = submitListeners.filter(function (_ref2) {
            var submitOnValue = _ref2.submitOnValue;
            return submitOnValue;
          }).map(function (_ref3) {
            var listener = _ref3.listener;
            return listener;
          });

          submitWithListeners(onValueSubmitListeners);
        }
      });

      function submit() {
        var allSubmitListeners = submitListeners.map(function (_ref4) {
          var listener = _ref4.listener;
          return listener;
        });

        return submitWithListeners(allSubmitListeners);
      }

      function setValue(path, value) {
        dispatch(actions.setValue(path, value));
      }

      function setValidationError(path, value) {
        dispatch(actions.setValidationError(path, value));
      }

      function clearValidationError(path) {
        dispatch(actions.clearValidationError(path));
      }

      function reset() {
        dispatch(actions.setState(initialState));
      }

      function clear() {
        dispatch(actions.setState({}));
      }

      return _extends({}, store, {
        getFormState: getFormState,
        dispatch: dispatch,
        addValidator: addValidator,
        removeValidator: removeValidator,
        addSubmitListener: addSubmitListener,
        removeSubmitListener: removeSubmitListener,
        validate: validate,
        submit: submit,
        setValue: setValue,
        setValidationError: setValidationError,
        clearValidationError: clearValidationError,
        reset: reset,
        clear: clear,
        unsubscribe: unsubscribe
      });
    };
  };
}