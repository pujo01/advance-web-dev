'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handlers;

exports.default = formReducer;

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _objectPathImmutable = require('object-path-immutable');

var _objectPathImmutable2 = _interopRequireDefault(_objectPathImmutable);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var handlers = (_handlers = {}, _defineProperty(_handlers, _constants.VALUE, function (state, _ref) {
  var path = _ref.path,
      value = _ref.value;
  return _objectPathImmutable2.default.set(state, path, value);
}), _defineProperty(_handlers, _constants.VALIDATION_ERROR, function (state, _ref2) {
  var path = _ref2.path,
      error = _ref2.error;
  // eslint-disable-line arrow-body-style
  // if error already exists at path, dont overwrite it
  return _objectPath2.default.get(state, ['errors', path]) ? state : _objectPathImmutable2.default.set(state, ['errors', path], error);
}), _defineProperty(_handlers, _constants.CLEAR_VALIDATION_ERROR, function (state, _ref3) {
  var path = _ref3.path;

  var newState = _objectPathImmutable2.default.del(state, ['errors', path]);

  if (newState.errors && Object.keys(newState.errors).length === 0) {
    delete newState.errors;
  }

  return newState;
}), _defineProperty(_handlers, _constants.SET_STATE, function (oldState, newState) {
  return newState;
}), _handlers);

function formReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return handlers[action.type] ? handlers[action.type](state, action.payload) : state;
}